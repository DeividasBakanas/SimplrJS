<script type="text/javascript">
	QUnit.config.reorder = false
	$(function() {
		
		module("Simplr.Util");
		test("Simplr.Util.mEmpty", function() {
			equal(Simplr.Util.mEmpty(), true, "no parameter");
			equal(Simplr.Util.mEmpty(""), true, "empty string");
			equal(Simplr.Util.mEmpty({}), true, "empty object");
			equal(Simplr.Util.mEmpty([]), true, "empty array");
			equal(Simplr.Util.mEmpty(0), false, "number");
			equal(Simplr.Util.mEmpty(5), false, "number");
			equal(Simplr.Util.mEmpty("abc"), false, "string");
			equal(Simplr.Util.mEmpty({ x : "" }), false, "object");
			equal(Simplr.Util.mEmpty({ y : "abc" }), false, "object");
			equal(Simplr.Util.mEmpty([1]), false, "array");
			equal(Simplr.Util.mEmpty(["a"]), false, "array");
			equal(Simplr.Util.mEmpty(true), false, "no parameter");
		});
		
		test("Simplr.Util.mEqual()", function() {
			equal(Simplr.Util.mEqual(["1", "1"]), true, "two strings");
			equal(Simplr.Util.mEqual(["abc", "abc"]), true, "two strings");
			equal(Simplr.Util.mEqual(["AAA", "aaa"]), false, "two strings");
			equal(Simplr.Util.mEqual(["aaa", "aaa", "aaa", "aaa"]), true, "multiple strings");
			equal(Simplr.Util.mEqual([1,1,2,2,3,3]), false, "multiple strings");
			equal(Simplr.Util.mEqual([{}, {}]), true, "2 objects");
			equal(Simplr.Util.mEqual([{ a : 1, b : 2 }, { b : 2, a : 1 }]), true, "2 objects");
			equal(Simplr.Util.mEqual([{ a : 1, b : 2 }, { a : 2, b : 1 }]), false, "2 objects");
			equal(Simplr.Util.mEqual([ [1, 2, 3], [3,2,1] ]), false, "2 objects");
			equal(Simplr.Util.mEqual([ [1, 2, 3], [1,2,3] ]), true, "2 objects");
			equal(Simplr.Util.mEqual([ [1, 2, 3], { a : 1, b : 2, c : 3} ]), false, "1 object, 1 array");
		});
		
		test("Simplr.Util.mGetUrlParameter()", function() {
			var p1 = Simplr.Util.mGetUrlParameter("param1");
			var p2 = Simplr.Util.mGetUrlParameter("param2");
			var p3 = Simplr.Util.mGetUrlParameter("abc");
			var p4 = Simplr.Util.mGetUrlParameter();
			var p4Length = 0;
			$.each(p4, function(key, value) {
				p4Length++;
			});

			equal((p1 == "simplr"), true, "Test - exist");
			equal((p2 == "123"), true, "Component - exist");
			equal((p3 == null), true, "abc - doesn't exist");
			equal(p4Length , 2, "all parameters ( 2 params)");
		});
		
		test("Simplr.Util.mHasLocalStorage()", function() {
			var hasSupport = false;
			try { if( !(typeof localStorage == undefined) ) { hasSupport = true; } } catch(e) {}
			equal(Simplr.Util.mHasLocalStorage(), hasSupport, "Local Storage, depends on browser running tests");
		});

		test("Simplr.Util.mTruncateString()", function() {
			deepEqual( Simplr.Util.mTruncateString({ string : "abcdefg", size : 2 }), "ab", "Simple Truncate" );
			deepEqual( Simplr.Util.mTruncateString({ string : "abcdefg", size : 3, postfix : ".?" }), "a.?", "Simple Truncate with postfix" );
			deepEqual( Simplr.Util.mTruncateString({ string : "abc defg", size : 7, postfix : ".." }), "abc ..", "Simple Truncate with postfix" );
			deepEqual( Simplr.Util.mTruncateString({ string : "abc defg", size : 7, postfix : "..", smart : false }), "abc d..", "Simple Truncate with postfix not smart" );
			deepEqual( Simplr.Util.mTruncateString({ string : "abcdefg", size : 10, postfix : "XXX" }), "abcdefg", "Simple Truncate doesn't truncate" );
		});

	});
</script>